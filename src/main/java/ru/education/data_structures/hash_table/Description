Пример создания хэша-кода для слов - можно взять любое слово и каждую букву возмести в степерь в зависимости от места,
где она расположена, например дом д(5^2) + о(16^1) + м(14^0) - таким образом можем получить уникальный хэш для кажого слова

Хэш-код - это положительное число, хранящиеся в диапазоне int.

Пример создания Хэша для объекта Cat (хэш от name) + (old) + (хэш от color) -> получаем достаточно уникальный хэш для
каждого объекта

Для определени в какой бакет положить объект применяется хэш-функция, чаще всего это остаток от деления хэша на размер
массива, например -> 96967976979793643 % 100 = 43

По умолчанию размер хэшмапы (capacity) в java - 16 бакетов.

Существует несколько методов решения проблемы коллизии в хэш-таблице.
Например в пайтоне используется открытая адресация ->  если коллизия, ещем следующую свободную ячейку. Для сохранения
сложности, внутренний массив должен быть в два раза больше initialCapacity иначе сложность может очень резко вырастать при коллизиях.
В java используется метод цепочек -> в value бакета лежит односвязанный список
Если элементов 8 и более, цепочка перестраиватся в двоичное дерево

Добавление, поиск и удаление элементов в hashMap java:
если нет, коллизий O(1),
если есть коллизия O(n),
при перестройке в дерево O(logn)

При загрузке массива на 0.75 (loadFactor) хэш-мапа перестраивается

Очень важно при создании, если возможно, указать размер, который мы предполаем для использования, т.к. увеличение
хэш-мап очень дорогая операция, необходимо пересчитать все хэш-коды и передобавить элементы

Двойное хэширование после пременения первой хэш-функции, применяем вторую, например -> смещение = константа - (хэш-код ключа % константа)

